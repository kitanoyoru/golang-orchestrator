// Code generated by MockGen. DO NOT EDIT.
// Source: task/service/docker/docker.go
//
// Generated by this command:
//
//	mockgen -source=task/service/docker/docker.go -destination=task/service/docker/mock/docker.go -package=dockermock
//

// Package dockermock is a generated GoMock package.
package dockermock

import (
	context "context"
	reflect "reflect"

	docker "github.com/kitanoyoru/golang-orchestrator/task/service/docker"
	gomock "go.uber.org/mock/gomock"
)

// MockDocker is a mock of Docker interface.
type MockDocker struct {
	ctrl     *gomock.Controller
	recorder *MockDockerMockRecorder
}

// MockDockerMockRecorder is the mock recorder for MockDocker.
type MockDockerMockRecorder struct {
	mock *MockDocker
}

// NewMockDocker creates a new mock instance.
func NewMockDocker(ctrl *gomock.Controller) *MockDocker {
	mock := &MockDocker{ctrl: ctrl}
	mock.recorder = &MockDockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocker) EXPECT() *MockDockerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockDocker) Run(ctx context.Context) docker.DockerResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(docker.DockerResult)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockDockerMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDocker)(nil).Run), ctx)
}

// Stop mocks base method.
func (m *MockDocker) Stop(ctx context.Context, id string) docker.DockerResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, id)
	ret0, _ := ret[0].(docker.DockerResult)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDockerMockRecorder) Stop(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDocker)(nil).Stop), ctx, id)
}
